package booksphere.model;

import java.sql.SQLException;
import java.sql.Timestamp;
import java.util.Date;
import java.util.List;

import booksphere.dal.*;
import booksphere.model.Books.BookType;


/**
 * main() runner, used for the app demo.
 *
 * Instructions:
 * 1. Create a new MySQL schema and then run the CREATE TABLE statements from lecture:
 * http://goo.gl/86a11H.
 * 2. Update ConnectionManager with the correct user, password, and schema.
 */
public class Inserter {

    public static void main(String[] args) throws SQLException {
        // DAO instances.
        AddressDao addressDao = AddressDao.getInstance();
        AuthorDao authorDao = AuthorDao.getInstance();
        BooksDao booksDao = BooksDao.getInstance();
        CreditCardsDao creditCardsDao = CreditCardsDao.getInstance();
        OrderInfoDao orderInfoDao = OrderInfoDao.getInstance();
        PublisherDao publisherDao = PublisherDao.getInstance();
        RatingDao ratingDao = RatingDao.getInstance();
        RecommendationsDao recommendationsDao = RecommendationsDao.getInstance();
        ReviewDao reviewDao = ReviewDao.getInstance();
        TransactionsDao transactionsDao = TransactionsDao.getInstance();
        UsersDao usersDao = UsersDao.getInstance();

     // Create an Address object
        Address address = new Address(
            1, // Address ID (assuming it's auto-generated by the database)
            "123 Main St", // Street 1
            "Apt 101", // Street 2
            "Seattle", // City
            "Washington", // State
            "98105", // Zip code
            true, // Billing address
            false, // Not a mailing address (assuming only one address is a mailing address)
            new Users(1) // User object (assuming you have a User object with a constructor that takes an ID)
        );
        address = addressDao.create(address);
        System.out.println("Created address: " + address);
     // Retrieve the address by ID
        Address retrievedAddress = addressDao.getAddressByAddressID(1);
        System.out.println("Retrieved address: " + retrievedAddress);
    // Delete the address
        addressDao.delete(address);
        System.out.println("Address deleted successfully.");
        
     // Create an Author object
        Author author = new Author(
            "John Doe", // Author name
            "John Doe is a prolific writer known for his captivating novels." // Biography
        );

        author = authorDao.create(author);
        System.out.println("Created author: " + author);

        // Update author biography
        Author authorToUpdate = authorDao.getAuthorByName("John Doe");
        if (authorToUpdate != null) {
            authorToUpdate = authorDao.update(authorToUpdate, "Updated biography for John Doe.");
            System.out.println("Author biography updated successfully.");
        } else {
            System.out.println("Author not found for update.");
        }

        // Delete author
        Author authorToDelete = authorDao.getAuthorByName("John Doe");
        if (authorToDelete != null) {
            authorDao.delete(authorToDelete);
            System.out.println("Author deleted successfully.");
        } else {
            System.out.println("Author not found for deletion.");
        }
        
     // Create a sample user
        String location = "New York";
        int age = 30;
        String firstName = "Donald";
        String lastName = "Trump";
        String password = "13579";
        Users user = new Users(location, age, firstName, lastName, password);

        // Insert the user
        user = usersDao.create(user);
        System.out.println("User inserted successfully. UserID: " + user.getUserID());
        
        // Retrieve the user by ID
        Users retrievedUser = usersDao.getUserByUserID(1);
        System.out.println("Retrieved user: " + retrievedUser);
     // Delete the user
        usersDao.delete(user);
        System.out.println("User deleted successfully.");

     // Create a sample credit card
        long cardNumber = 1234567890123456L; // Replace with your actual credit card number
        Date expirationDate = new Date(); // Replace with the expiration date of the credit card
        CreditCards creditCard = new CreditCards(cardNumber, expirationDate, user, address);

        // Insert the credit card
        creditCard = creditCardsDao.create(creditCard);
        System.out.println("Credit card inserted successfully. Card Number: " + creditCard.getCardNumber());
        
     // Retrieve credit card by card number
        CreditCards retrievedCreditCard = creditCardsDao.getCreditCardByCardNumber(1234567890123456L);
        System.out.println("Retrieved credit card: " + retrievedCreditCard);

        // Retrieve credit cards by userID
        List<CreditCards> creditCardList = creditCardsDao.getCreditCardsByUserID(1);
        System.out.println("Credit cards for user b: " + creditCardList);

        // Delete the credit card
        creditCardsDao.delete(retrievedCreditCard);
        System.out.println("Credit card deleted successfully.");
        
     // Create a sample publisher
        String publisherName = "Sample Publisher";
        String biography = "This is a sample biography of the publisher.";
        Publisher publisher = new Publisher(publisherName, biography);

        // Insert the publisher
        publisher = publisherDao.create(publisher);
        System.out.println("Publisher inserted successfully. PublisherID: " + publisher.getPublisherID());
        
        // Retrieve a publisher by ID
        Publisher retrievedPublisher = publisherDao.getPublisherByPublisherID(1);
        System.out.println("Retrieved Book: " + retrievedPublisher);
        
     // Retrieve a publisher by name
        Publisher retrievedPublisher2 = publisherDao.getPublisherByPublisherName(publisherName);
        System.out.println("Retrieved Book: " + retrievedPublisher2);

     // Update publisher
        Publisher publisherToUpdate = publisherDao.getPublisherByPublisherID(1);
        if (publisherToUpdate != null) {
        	publisherToUpdate = publisherDao.update(publisherToUpdate);
            System.out.println("Publisher is updated successfully.");
        } else {
            System.out.println("Publisher is not found for update.");
        }

        // Delete publisher
        Publisher publisherToDelete = publisherDao.getPublisherByPublisherID(1);
        if (publisherToUpdate != null) {
            publisherDao.delete(publisherToDelete);
            System.out.println("Publisher deleted successfully.");
        } else {
            System.out.println("Publisher not found for deletion.");
        }

		// Create a Book object   
        BookType BookType = null;
        Books newBook = new Books(
        	"1234567", // ISBN
        	"Sample Book Title", //Title
            author, // Author name
            2023, // Book Year
            publisher, // Publisher
            BookType // BookType
        );
        
     // Insert book
        newBook = booksDao.create(newBook);
        System.out.println("Book inserted successfully. Book ID: " + newBook.getBookID());
  
     // Retrieve a book by ID
        Books retrievedBook = booksDao.getBookByBookID(1);
        System.out.println("Retrieved Book: " + retrievedBook);
        
     // Retrieve a book by ISBN
        Books retrievedBook2 = booksDao.getBookByISBN("1234567");
        System.out.println("Retrieved Book: " + retrievedBook2);

     // Update book
        Books bookToUpdate = booksDao.getBookByISBN("1234567");
        if (bookToUpdate != null) {
            bookToUpdate = booksDao.update(bookToUpdate);
            System.out.println("Book is updated successfully.");
        } else {
            System.out.println("Book is not found for update.");
        }

        // Delete book
        Books bookToDelete = booksDao.getBookByISBN("1234567");
        if (bookToDelete != null) {
            booksDao.delete(bookToDelete);
            System.out.println("Book deleted successfully.");
        } else {
            System.out.println("Book not found for deletion.");
        }

        // Create an order 
        OrderInfo.OrderStatus status = OrderInfo.OrderStatus.PENDING;
        OrderInfo orderInfo = new OrderInfo(user, newBook, status);
     // Insert the order
        orderInfo = orderInfoDao.create(orderInfo);
        System.out.println("Order inserted successfully. OrderID: " + orderInfo.getOrderID());

        // Retrieve an order by ID
        OrderInfo retrievedOrder = orderInfoDao.getOrderInfoByOrderID(1); // Replace 1 with the actual order ID
        System.out.println("Retrieved Order: " + retrievedOrder);

        // Update order status
        OrderInfo orderToUpdate = orderInfoDao.getOrderInfoByOrderID(1); // Replace 1 with the actual order ID
        if (orderToUpdate != null) {
            orderToUpdate.setStatus(OrderInfo.OrderStatus.FINISHED); // Set the new order status
            orderToUpdate = orderInfoDao.update(orderToUpdate);
            System.out.println("Order is updated successfully.");
        } else {
            System.out.println("Order is not found for update.");
        }

        // Delete order
        OrderInfo orderToDelete = orderInfoDao.getOrderInfoByOrderID(1); // Replace 1 with the actual order ID
        if (orderToDelete != null) {
            orderInfoDao.delete(orderToDelete);
            System.out.println("Order deleted successfully.");
        } else {
            System.out.println("Order not found for deletion.");
        }
        
     // Create a sample rating
        int ratingValue = 5; // Set the rating value
        Rating rating = new Rating(ratingValue, user, newBook);

        // Insert the rating
        rating = ratingDao.create(rating);
        System.out.println("Rating inserted successfully. RatingID: " + rating.getRatingID());

        // Retrieve a rating by ID
        Rating retrievedRating = ratingDao.getRatingByRatingID(1); // Replace 1 with the actual rating ID
        System.out.println("Retrieved Rating: " + retrievedRating);

        // Update rating value
        Rating ratingToUpdate = ratingDao.getRatingByRatingID(1); // Replace 1 with the actual rating ID
        if (ratingToUpdate != null) {
            ratingToUpdate.setRating(4); // Set the new rating value
            ratingToUpdate = ratingDao.update(ratingToUpdate);
            System.out.println("Rating is updated successfully.");
        } else {
            System.out.println("Rating is not found for update.");
        }

        // Delete rating
        Rating ratingToDelete = ratingDao.getRatingByRatingID(1); // Replace 1 with the actual rating ID
        if (ratingToDelete != null) {
            ratingDao.delete(ratingToDelete);
            System.out.println("Rating deleted successfully.");
        } else {
            System.out.println("Rating not found for deletion.");
        }
        
     // Create a sample recommendation
        boolean recommend = true; // Set the recommendation status
        Recommendations recommendation = new Recommendations(user, newBook, publisher, recommend);

        // Insert the recommendation
        recommendation = recommendationsDao.create(recommendation);
        System.out.println("Recommendation inserted successfully. RecommendationID: " + recommendation.getRecommendationID());

        // Retrieve a recommendation by ID
        Recommendations retrievedRecommendation = recommendationsDao.getRecommendationByID(1); // Replace 1 with the actual recommendation ID
        System.out.println("Retrieved Recommendation: " + retrievedRecommendation);

        // Update recommendation status
        Recommendations recommendationToUpdate = recommendationsDao.getRecommendationByID(1); // Replace 1 with the actual recommendation ID
        if (recommendationToUpdate != null) {
            recommendationToUpdate.setRecommend(false); // Set the new recommendation status
            recommendationToUpdate = recommendationsDao.update(recommendationToUpdate);
            System.out.println("Recommendation is updated successfully.");
        } else {
            System.out.println("Recommendation is not found for update.");
        }

        // Delete recommendation
        Recommendations recommendationToDelete = recommendationsDao.getRecommendationByID(1); // Replace 1 with the actual recommendation ID
        if (recommendationToDelete != null) {
            recommendationsDao.delete(recommendationToDelete);
            System.out.println("Recommendation deleted successfully.");
        } else {
            System.out.println("Recommendation not found for deletion.");
        }

     // Create a sample review
        String reviewText = "This book is amazing!"; // Set the review text
        Review review = new Review(user, newBook, reviewText);

        // Insert the review
        review = reviewDao.create(review);
        System.out.println("Review inserted successfully. ReviewID: " + review.getReviewID());

        // Retrieve a review by ID
        Review retrievedReview = reviewDao.getReviewByReviewID(1); // Replace 1 with the actual review ID
        System.out.println("Retrieved Review: " + retrievedReview);

        // Delete review
        Review reviewToDelete = reviewDao.getReviewByReviewID(1); // Replace 1 with the actual review ID
        if (reviewToDelete != null) {
            reviewDao.delete(reviewToDelete);
            System.out.println("Review deleted successfully.");
        } else {
            System.out.println("Review not found for deletion.");
        }

     // Create a sample transaction

        Timestamp transactionDate = new Timestamp(System.currentTimeMillis()); // Set the transaction date
        Transactions transaction = new Transactions(creditCard, newBook, transactionDate, user, orderInfo);

        // Insert the transaction
        transaction = transactionsDao.create(transaction);
        System.out.println("Transaction inserted successfully. TransactionID: " + transaction.getTransactionID());

        // Retrieve a transaction by ID
        Transactions retrievedTransaction = transactionsDao.getTransactionByID(1); // Replace 1 with the actual transaction ID
        System.out.println("Retrieved Transaction: " + retrievedTransaction);

        // Update transaction
        Transactions transactionToUpdate = transactionsDao.getTransactionByID(1); // Replace 1 with the actual transaction ID
        if (transactionToUpdate != null) {
            transactionToUpdate.setTransactionDate(new Timestamp(System.currentTimeMillis())); // Set the new transaction date
            transactionToUpdate = transactionsDao.update(transactionToUpdate);
            System.out.println("Transaction is updated successfully.");
        } else {
            System.out.println("Transaction is not found for update.");
        }

        // Delete transaction
        Transactions transactionToDelete = transactionsDao.getTransactionByID(1); // Replace 1 with the actual transaction ID
        if (transactionToDelete != null) {
            transactionsDao.delete(transactionToDelete);
            System.out.println("Transaction deleted successfully.");
        } else {
            System.out.println("Transaction not found for deletion.");
        }


    }     
}
